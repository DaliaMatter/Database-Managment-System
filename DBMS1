#!/bin/bash

function isEmptyDB
{
    dirList=(`ls Databases`)
    if [ ${#dirList[@]} != 0 ]
    then
        isEmpty=1
    else
        isEmpty=0
    fi        
}

function isEmptyT
{
    tableList=(`ls`)
    if [ ${#tableList[@]} != 0 ]
    then
        isEmptyy=1
    else
        isEmptyy=0
    fi        
}

function DisplayDatabases
{
    echo "___________________________________________";
    echo "";
    index=1;
    isEmptyDB
    dirList=(`ls Databases`)
    #echo ${#dirList[@]}
    if [ $isEmpty != 0 ]
    then
        echo "Your Databases List: "
        for i in ${dirList[@]}
        do 
            echo "("$index")" $i
            let index+=1;
        done
    else
        echo "System is Empty!";
    fi
    echo "___________________________________________"; 
}

function CreateDatabase
{
    found=0;
    flag=0;
    echo -n "Enter Name of Database:"
    read DBname;
    while [ $flag == 0 ]
    do 
        for i in `ls Databases`
        do 
            if [ $i == $DBname ]
            then
                found=1;
                break;
            else  
                found=0;
            fi 
        done

        if [ $found == 1 ]
        then 
            echo $DBname "is already exist , Re-enter the Name: "
            read DBname;
            flag=0;
        else 
            cd Databases
            mkdir $DBname;
            echo "Database Created Successfully..."
            flag=1;
            cd ..
        fi
    done
    
}

function ConnectToDatabase
{
    isEmptyDB
    if [ $isEmpty != 0 ]
    then
        cd Databases
        flag=0;
        found=0;
        echo -n "Enter Name of Database: "
        read DBname;
        while [ $flag == 0 ]
        do
            for i in `ls`
            do 
                if [ $i == $DBname ]
                then
                    found=1;
                    break;
                else
                    found=0;
                fi    
            done

            if [ $found == 1 ]
            then
                cd $DBname;
                clear
                echo "Connected Successfully...";
                echo "------------------------ "$DBname "Database ------------------------"
                TableMenu
                flag=1;
            else
                echo -n $DBname "Not found.. Please Re-enter the Database Name: ";
                read DBname;
                flag=0;
            fi
        done
    else
        echo "-------------------------------------------------"
        echo "Sorry but System is Empty"
        echo "-------------------------------------------------"
    fi        
}

function DisplayTables
{
    echo "___________________________________________";
    echo "";
    index=1;
    isEmptyT
    tableList=(`ls`)
    #echo ${#tableList[@]}
    if [ $isEmptyy != 0 ]
    then 
        echo "Your Table List: "
        for i in `ls *data`
        do 
        
            echo "("$index")" $i | cut -f1 -d".";
            let index+=1;
        done
    else
        echo "This Database is Empty!";
    fi    
    echo "___________________________________________"; 
}

#----> function to Creat Meta-Data(INFo) of Table <----#
function TableMetaData
{
    touch $1.metaData
    PK=0;
    echo "Enter Number Of Fields: "
    read NoOfCol;
    echo "NumberOfCols:"$NoOfCol >> $1.metaData;
    for (( i=1; i<=$NoOfCol; i++ ))
    do
        echo -n "Enter Field Name: "
        read FName;
        echo $i "Name:"$FName >> $1.metaData;
        echo -n "Enter Field Datatype: "
        select choice in "Integer" "String"
        do
            case $choice in
                "Integer") echo $i "Datatype:Int"  >> $1.metaData; break ;;
                "String") echo $i "Datatype:String"  >> $1.metaData; break ;;
            esac    
        done
        if [ $PK = 0 ]
        then
            echo -n "Make This Field Primary Key?y/n"
            read answer
            case $answer in 
                ?("y"||"Y")) PK=1
                             echo "PK:$i" >> $1.metaData ;;
                ?("n"||"N")) PK=0 ;;
                *) echo "Invalid Input.. So it's No XD "
            esac
        fi
    done
}

function CreateTable
{
    found=0;
    flag=0;
    echo -n "Enter Name of Table: ";
    read TName;
    while [ $flag = 0 ]
    do 
        for i in `ls`
        do 
            if [ $i = $TName.data ]
            then 
                found=1;
                break;
            else
                found=0;
            fi
        done

        if [ $found = 1 ]
        then 
            echo -n $TName "is already Exist... Please Re-enter Name of Table: "
            read TName;
            flag=0;
        else
            touch $TName.data;
            flag=1;
            TableMetaData $TName
            echo $TName "Table Created Successfully...";
        fi
    done    
}

#----> function to Insert into Table <----#
function InsertData
{
    echo "--------------------- $1 Table ---------------------"
    #NoOfCol=`grep "NumberOfCols" $1.metaData | cut -d: -f2`
    NoOfCol=`sed -n '/:/ s/NumberOfCols://p' $1.metaData`
    PkCol=`sed -n '/:/ s/PK://p' $1.metaData`
    #echo $NoOfCol
    declare -a fieldsNames[$NoOfCol];
    declare -a fieldsDatatypes[$NoOfCol];
    PkData=`cut -d: -f $PkCol $1.data`
    #echo $PkData
    NewRecord="";
    for (( i=1; i<=$NoOfCol; i++ ))
    do
        fieldsNames[$i]=`grep "$i Name" $1.metaData | cut -d: -f2`
        fieldsDatatypes[$i]=`grep "$i Datatype" $1.metaData | cut -d: -f2`
    done

    for (( i=1; i<=$NoOfCol; i++ ))
    do
        #echo $i "----->" $NoOfCol
        #echo ${fieldsTypes[$i]}
        echo -n "Enter "${fieldsNames[$i]}" :"
        read data;
        flag=0;
        Pkflag=0;
        while [ $flag = 0 ]
        do
            case $data in 
                +([[:lower:]]|[[:upper:]])) datatype="String" ;;
                +([0-9])) datatype="Int" ;;
                +([[:lower:]]|[[:upper:]]|[0-9])) echo -n "Invalid Input... Please Re-enter your Data:"
                                                  read data ;;
                *) echo -n "Invalid Input... Please Re-enter your Data:"
                                                  read data ;;
            esac
            #echo ${fieldsNames[$i]} "---->" $datatype
            if [ ${fieldsDatatypes[$i]} != $datatype ]
            then 
                echo -n "Invalid Input... Please Re-enter your Data:";
                read data;
            else
                #echo $PkCol
                #echo $i
                if [ "$PkCol" -eq "$i" ]
                then
                    #echo "hhhh"
                    for item in ${PkData[@]}
                    do
                        if [ "$data" -eq "$item" ]
                        then 
                            echo -n "Invalid Input... Please Re-enter your Data:";
                            read data;
                            flag=0;
                            Pkflag=0;
                            break;
                        else
                            #echo "PK"
                            flag=1;
                            Pkflag=1;    
                        fi    
                    done
                    if [ $Pkflag = 1 ]
                    then
                        echo "PK";
                        if [ "$i" -eq "$NoOfCol" ]
                        then
                            NewRecord+=$data;
                        else    
                            NewRecord+=$data":";
                        fi
                    fi    
                else 
                    if [ "$i" -eq "$NoOfCol" ]
                    then
                        NewRecord+=$data;
                    else    
                        NewRecord+=$data":";
                    fi
                    flag=1;
                fi
            fi
        done   
    done
    echo "Your Data Inserted Successfully...";
    echo $NewRecord >> $1.data;
}

function SelectFromTable
{
    echo "------------------- $1 Table Data -------------------"
    Output=$( sed -n 'p' $1.data)
    if [ -z  "$Output" ]
    then 
        echo "This table is Empty!";
    else
        #echo $Output
        printf '%s\n' "${Output[@]}"
    fi        
}

function DeleteData
{   
    echo "--------------------- $1 Table ---------------------"
    counter=(`wc -l $1.data`)
    if [ -s $1.data ]           # check if the table is Empty 
    then 
        echo -n "How many Rows you want to Delete?"
        read NoOfRows
        #echo $NoOfRows "U"
        #echo $1
        #echo ${counter[0]} "E"
        if [ "${counter[0]}" -ge "$NoOfRows" ] # check if the table can delete the nimber of records the user want to delete
        then
            if [ $NoOfRows == 1 ]    # check on the number of the record is valid 
            then
                echo -n "Which Row you want to Delete: ";
                read x
                sed -i "$x d" $1.data
                echo $NoOfRows "Deleted" 
                echo "Your Data Deleted Successfully..." 
            elif [ $NoOfRows == 0 ]
            then
                echo "Okey XD"    
            elif [ $NoOfRows > 1 ]
            then
                echo -n "From : "
                read start;
                echo -n "To : "
                read end;
                #echo ${counter[0]}
                #echo $start
                #echo $end
                if [ ${counter[0]} < $start ] || [ ${counter[0]} < $end ]  # check if the number of record in rang 
                then 
                    echo "Invalid Input..." 
                else
                    #echo "Dalia"
                    sed -i "$start,$end d" $1.data  
                    echo $NoOfRows "Deleted" 
                    echo "Your Data Deleted Successfully..."  
                fi    
            else
                echo "Invalid Input..."     
            fi
        else
            echo "Invalid Input..."
        fi
    else
        echo "This table is Empty!";
    fi        
}

function SearchOfTable
{
    isEmptyT
    if [ $isEmptyy != 0 ]
    then
        found=0;
        flag=0;
        echo -n "Enter Name of Table: ";
        read TName;
        #echo $tName
        while [ $flag = 0 ]
        do 
            tableName=$TName.data
            for i in `ls`
            do
                if [ $i = $tableName ]
                then 
                    found=1;
                    break;
                else
                    found=0;
                fi
            done

            if [ $found = 1 ]
            then 
                flag=1;
                if [ $1 = "I" ]
                then 
                    InsertData $TName
                elif [ $1 = "D" ]
                then
                    DeleteData $TName
                elif [ $1 = "S" ]
                then    
                    SelectFromTable $TName    
                fi
            else 
                flag=0;
                echo -n $TName "Not found.. Please Re-enter the Table Name: ";
                read TName;
            fi            
        done
    else
        echo "___________________________________________";
        echo "";
        echo "Sorry but $TName Database is Empty! ";
        echo "___________________________________________";
    fi        
}

function TableMenu
{
    while [ true ]
    do 
        PS3="What do you want to do ? "
        select choice in "Display Tables" "Create Table" "Insert in Table" "Delete from Table" "Select from Table" "Exit"
        do
            case $choice in
                "Display Tables") clear
                                  DisplayTables 
                                  break ;;
                "Create Table") clear
                                CreateTable 
                                break ;;
                "Insert in Table") clear
                                   SearchOfTable "I" 
                                   break ;;
                "Delete from Table") clear
                                     SearchOfTable "D" 
                                     break ;; 
                "Select from Table") clear
                                     SearchOfTable "S" 
                                     break ;;
                "Exit") cd ..
                        cd .. 
                        clear
                        DatabaseMenu 
                        break ;;
                *) clear
                   echo "Invalid Option !!!" 
                   break ;;       
            esac
        done
    done         
}

function DatabaseMenu
{
    while [ true ]
    do
        PS3="What do you want to do ? "
        echo "------------ Welcome in Nahla & Dalia Database Managment System ------------";
        select choice in "Display All Dalabases" "Create New Database" "Connect on Database" "Exit"
        do 
            case $choice in 
                "Display All Dalabases") clear
                                         DisplayDatabases 
                                         break ;;
                "Create New Database") clear
                                       CreateDatabase 
                                       break ;;
                "Connect on Database") clear
                                       ConnectToDatabase 
                                       break ;;
                "Exit") exit ;;

                *) clear
                   echo "Invalid Option !!!" 
                   break ;;
            esac
        done
    done
}

DatabaseMenu
